
  generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-3.0.x"]
  }
  
  datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
  }
        
model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  password  String?
  username  String    @unique
  name      String?
  role      String    @default("user")
  bio       String?
  profilePictureUrl String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  recipes      Recipe[]
  comments     Comment[]
  likes        Like[]
  notifications Notification[]
  payments     Payment[]

  @@map("users")
}

model Recipe {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  ingredients String
  steps       String
  imageUrl    String?
  authorId    String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User     @relation(fields: [authorId], references: [id])
  comments    Comment[]
  likes       Like[]

  @@map("recipes")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String   @db.ObjectId
  recipeId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])

  @@map("comments")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  recipeId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])

  @@unique([userId, recipeId])
  @@map("likes")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String   @db.ObjectId
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Payment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  paymentStatus String
  paymentDate   DateTime @default(now())
  userId        String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id])

  @@map("payments")
}